from dash import Dash, dcc, html
import pandas as pd
# from helpfile import *
# import plotly.express as px

# some_file.py
import sys
# caution: path[0] is reserved for script path (or '' in REPL)
sys.path.insert(1, 'C:/Users/rinar/Documents/Master_Thesis/Project_Master_Thesis/')

from helpfile import *
from dash.dependencies import Input, Output
sample_ids = ['7797671729', '2374866935', '1027891959', '6056970085', '1575947951', '1930587642', '2624031665', '3939570641', '5150138290', '8912221984', '272115329', '5082239069', '3262630692', '6546022824', '9215212174', '2948957348', '4719508428', '1424247178', '5535388939', '1920015927', '4985361720', '8410327497', '2285931181', '5915275855', '8434799395', '1617174760', '5837820554', '3020446236', '7352754819', '1415560110', '7855166538', '5082238677', '7764697641', '7688155199', '2739324469', '6128264237', '4560858145', '5176477776', '9296174813', '7215879820', '5114920853', '924698044', '4476561380', '4761934277', '4449599697', '1624375149', '6491488541', '9408066448', '1151933960', '1166963831', '1743181460', '6561731217', '9095209607', '6970348767', '1884596285', '3992544940', '1726892515', '3595103622', '9218202692', '4746122250', '8434018748', '7764682681', '6568686686', '6988564591', '7004017692', '2595845174', '1151741950', '2292506785', '8964739984', '272117176', '704986376', '1097919722', '3148283184', '3449172218', '752697913', '6793250174', '6783552185', '1770064089', '3371393364', '2499713645', '4955317814', '1740730561', '7904341206', '272115257', '3147424752', '1589536660', '894883357', '1026531209', '1909034421', '8713424226', '8262020276', '2186484474', '1013654504', '5163932377', '3148281819', '2921118179', '2587564185', '9359474095', '7771189335', '2122783073', '8651194089', '3673506163', '8419619767', '2345935711', '8912222628', '1113476082', '8848619787', '4498235599', '7769579600', '1589537733', '4390048794', '7261666354', '1471726920', '3112173129', '5163920913', '7492081190', '7622995011', 
'1673650287', '8654458008', '944348982', '5313665881', '8428064903', '7653793814', '6939112380', '1853815166', '4620749627', '9312315959', '3056988700', '2186484372', '1875102546', '2056840086', '5389703959', '9111843626', '1997782975', '5163917443', '7252047805', '1996228900', '6794573244', '7765272151', '3894100032', '5095801813', '2011013710', '6521984906', '7252092073', '1122301582', '8460998434', '1700585282', '9104211066', '3736539990', '1809591925', '6518836108', '1664273915', '1048501886', '7786710722', '3047666183', '7680574748', '258215991', '6988600992', '7260626676', '6480782432', '3733258889', '4584736479', '8419637548', '1165440089', '6238232201', '3753437234', '1680486050', '3107479108', '8118634791', '1662991451', '8419736029', '8672878884', '7607458643', '1815489004', '1718145051', '2712095779', '2029842544', '6996871541', '8929120508', '2419129519', '5025334393', '6581574119', '4706019018', '5888421476', '3388175864', '1968567051', '2615869809', '6518836116', '1777427884', '9104186716', 
'3260713756', '6524096863', '4262091946', '2316313228', '3214444081', '6651687370', '3655658971', '3452090278', '8458247967', '5891088229', '5995908666', '8391149134', '5923385688', '270357250', '3161770047', '1589534393', '2417452822', '9117542634', '2048337774', '6035490207', '1384683288', '5849748944', '5146621888', '2441125212', '2417980229', '1151742604', '4589467464', '3244610826', '1416409694', '3182337193', '5492542110', '6318909312', '5432935507', '7215865632', '4840380430', '1167267110', '1025784601', '1053727024', '2451031318', '5890648034', '7764745433', '6623032214', '9360391597', '9121166721', '4584807425', '7215848611', '1791231486', '1181453712', '1832298729', '2264948609', '3500846823', '2510245918', '5566853405', '5891092006', '5083690844', '4732541721', '5043825718', '2022677547', '6937408708', '1437732154', '8320783057', '1298230116', '8936100386', '7041615621', '1601210036', '1849367972', '5341756159', '4729571063', '3522137649', '6104164656', '2154680362', '1615750563', '6965087369', '8434780991', '6616196348', '1840150948', '1455124921', '6322530119', '2340723405', '3592929764', '9145778033', '5082238001', '3692959361', '6518027465', '2730052278', '6471038549', '1221615955', '3439395633', '9231166817', '5591749272', '5308533392', '5150138312', '2966451671', '6802898221', '5163922664', '1607651980', '1693089065', '7040783889', '6528146185', '4009650931', '2302355877', '3898819504', '6990139676', '5163913327', '7924447348', '919304640', '7455108676', '1762991778', '1919822384', '7850419600', '1684638771', '2577027694', '2579714987', '8508583076', '8403337904', '3435388009', '2339113473', '452073517', '5080016996', '922236317', '2363140337', '7928623639', '4348680640', '3812721808', '2275396340', '8410440585', '2382531607', '7286426642', '8434368421', '2581019409', '6503568875', '5163912807', '7033721313', '3815264055', '2666097407', '7223278655', '942137868', '3327065203', '8187010321', '6992343190', '3753437267', '272115430', '8242683338', '6469541658', '2364227353', '8410379160', '1545900356', '2451004332', '4210817900', '4201689533', '6401976083', '1551290006', '2587236541', '8303074815', '5163913596', '1244655330', '1290372499', '8677949828', '5556028346', '8014031364', '5163922637', '2954983745', '2217417101', '7781781835', '303118651', '8425257278', '7819899516', '7819946291', '6804257478', '6470441916', '5018774870', '7706763954', '2499964194', '3449172305', '6991236911', '2132626411', '3255957762', '9060109350', '4929076063', '923875694', '9159399039', '5491076659', '1172112932', '6764954007', '2139148786', '1589537160', '1494285809', '5888425052', '807724123', '3557688209', '388217544', '1111612156', '8912221124', '2349681507', '7254666931', '8425208004', '6948802301', '2577027775', '2130794151', '1589536069', '2200423687', '1832321873', '5083690926', '940891707', '7112438021', '1097199277', '1724595511', '3239588184', '5701195518', '3373515263', '5838427831', '2507732948', '7947154167', '2294939329', '8526073818', '7839672631', '1740079614', '8798263428', '7260642669', '3371302713', '2906431235', '4035524803', '272130606', '5163928361', '8729285093', '3883121706', '923688762', '5566853434', '7171036554', '2788572756', '9210579502', '2726824668', '3100780424', '1614866793', '1872676122', '8912221734', '3163247787', '8725467246', '4296681420', '8729456983', '303782911', '1928443492', '9374967509', '9296230326', '4984739922', '1437732252', '3768786138', '2731749816', '924698194', '7816690513', '3768743074', '7093405395', '313798922', '7340344056', '3041025463', '8246213025', '1624392045', '6000766202', '7258941108', '509397369', '8419657574', '6988559483', '1872676188', '1151725070', '4031834598', '8963319270', '1700585001', '6151336831', '3500847307', '3148285434', '3289327499', '1589534545', '3318241737', '2998393243', '5002387899', '7856839036', '6053446742', '8770180008', '1117047106', '4198277128', '331106995', '1664214450', '8912186655', '3501160839', '7688130957', '2509419786', '3238684168', '5715077298', '7764554550', '3750344359', '939559883', '6562788952', '3427533937', '928693506', '8099096704', '4562209361', '2277532280', '5364573965', '7234098553', '6358676719', '5932632147', '3449173774', '3768743082', '6795253605', '7283894536', '2085679560', '7764532648', '3067226335', '9104892195', '8715595726']



df = pd.read_csv("data/data_processed_allclusters.csv")#.iloc[1:5000]
if 'Unnamed: 0' in df.columns:
    data_clean = df.drop('Unnamed: 0', axis = 1)

WFids_list = list(df.columns[12::])

WTids_options = [{'label': i, 'value': i} for i in sample_ids]
WF_options = [{'label': i, 'value': i} for i in WFids_list]
landcover_options = [{'label': i, 'value': i} for i in df["Land Cover"].unique()]

app = Dash(__name__)

app.layout = html.Div([
    html.H1("Random Wind Farms Spots with different Clustering levels"),
    dcc.Dropdown(id="dd_wfid", value=sample_ids[0], options=WTids_options), 
    html.Div(children=[
         html.Div(children=[
            dcc.Graph(id="graph1"),
            dcc.Dropdown(id="dd_1", value="WFid_0.8", options=WF_options)
        ], style={'display': 'inline-block', "width" : "33%"}), 
        html.Div(children=[
            dcc.Graph(id="graph2"),
            dcc.Dropdown(id="dd_2", value="WFid_1.2", options=WF_options)
        ], style={'display': 'inline-block', "width" : "33%"}), 
        html.Div(children=[
            dcc.Graph(id="graph3"),
            dcc.Dropdown(id="dd_3", value="WFid_1.4", options=WF_options)
        ], style={'display': 'inline-block', "width" : "33%"}), 
    ], 
    style={'width': '100%'}) , 

    dcc.Graph(id="mapgraph")
])
# Link drop down to geojson hideout prop (could be done with a normal callback, but clientside is more performant).
# app.clientside_callback("function(x){return x;}", Output("geojson", "hideout"), Input("dd", "value"))

# Plot 1
@app.callback(
    Output(component_id="graph1", component_property='figure'), 
    Output(component_id="mapgraph", component_property='figure'), 
    Input(component_id="dd_1", component_property="value"),
    Input(component_id="dd_wfid", component_property="value")
)
def update_plot1(value_wf, value_wt):
    # print(selected_landcover)
    # filtered_wf = [{'lat': i, 'lon': j} for i, j in df[df["land_cover"] == str(value)][["lat", "lon"]].values]
    plot1_figures, mapfig = plotRandomWF_bySampleID(df, wfid_column = value_wf, sample_ids=pd.to_numeric(value_wt))

    # positions_new = dlx.dicts_to_geojson(filtered_wf)  
    return  plot1_figures, mapfig

# Plot 2
@app.callback(
    Output(component_id="graph2", component_property='figure'), 
    Input(component_id="dd_2", component_property="value"),
    Input(component_id="dd_wfid", component_property="value")

)
def update_plo2(value_wf, value_wt):
    # print(selected_landcover)
    # filtered_wf = [{'lat': i, 'lon': j} for i, j in df[df["land_cover"] == str(value)][["lat", "lon"]].values]
    plot2_figures, mapfig = plotRandomWF_bySampleID(df, wfid_column = value_wf, sample_ids=pd.to_numeric(value_wt))

    # positions_new = dlx.dicts_to_geojson(filtered_wf)  
    return  plot2_figures

# Plot 3 
@app.callback(
    Output(component_id="graph3", component_property='figure'), 
    Input(component_id="dd_3", component_property="value"),     
    Input(component_id="dd_wfid", component_property="value")

)
def update_plot3(value_wf, value_wt):
    # print(selected_landcover)
    # filtered_wf = [{'lat': i, 'lon': j} for i, j in df[df["land_cover"] == str(value)][["lat", "lon"]].values]
    plot3_figures, mapfig =plotRandomWF_bySampleID(df, wfid_column = value_wf, sample_ids=pd.to_numeric(value_wt))

    # positions_new = dlx.dicts_to_geojson(filtered_wf)  
    return  plot3_figures



if __name__ == '__main__':
    app.run_server(debug=True, port = "8040")
